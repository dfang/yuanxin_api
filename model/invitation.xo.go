// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	null "gopkg.in/guregu/null.v3"
)

// Invitation represents a row from 'news.invitations'.
type Invitation struct {
	ID             int         `json:"id"`                                       // id
	InvitationCode null.String `json:"invitation_code" schema:"invitation_code"` // invitation_code
	HasActivated   null.Bool   `json:"has_activated" schema:"has_activated"`     // has_activated

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Invitation exists in the database.
func (i *Invitation) Exists() bool {
	return i._exists
}

// Deleted provides information if the Invitation has been deleted from the database.
func (i *Invitation) Deleted() bool {
	return i._deleted
}

// Insert inserts the Invitation to the database.
func (i *Invitation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.invitations (` +
		`invitation_code, has_activated` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, i.InvitationCode, i.HasActivated)
	res, err := db.Exec(sqlstr, i.InvitationCode, i.HasActivated)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	i.ID = int(id)
	i._exists = true

	return nil
}

// Update updates the Invitation in the database.
func (i *Invitation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.invitations SET ` +
		`invitation_code = ?, has_activated = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, i.InvitationCode, i.HasActivated, i.ID)
	_, err = db.Exec(sqlstr, i.InvitationCode, i.HasActivated, i.ID)
	return err
}

// Save saves the Invitation to the database.
func (i *Invitation) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Delete deletes the Invitation from the database.
func (i *Invitation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.invitations WHERE id = ?`

	// run query
	XOLog(sqlstr, i.ID)
	_, err = db.Exec(sqlstr, i.ID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// InvitationByID retrieves a row from 'news.invitations' as a Invitation.
//
// Generated from index 'invitation_id_pkey'.
func InvitationByID(db XODB, id int) (*Invitation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, invitation_code, has_activated ` +
		`FROM news.invitations ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	i := Invitation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.ID, &i.InvitationCode, &i.HasActivated)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
