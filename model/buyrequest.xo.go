// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	null "gopkg.in/guregu/null.v3"
)

// BuyRequest represents a row from 'news.buy_request'.
type BuyRequest struct {
	ID        int         `json:"id"`                       // id
	UserID    null.Int    `json:"user_id" schema:"user_id"` // user_id
	Title     null.String `json:"title"`                    // title
	Content   null.String `json:"content"`                  // content
	Amount    null.Int    `json:"amount"`                   // amount
	CreatedAt null.Time   `json:"created_at"`               // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the BuyRequest exists in the database.
func (br *BuyRequest) Exists() bool {
	return br._exists
}

// Deleted provides information if the BuyRequest has been deleted from the database.
func (br *BuyRequest) Deleted() bool {
	return br._deleted
}

// Insert inserts the BuyRequest to the database.
func (br *BuyRequest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if br._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.buy_request (` +
		`user_id, title, content, amount, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, br.UserID.Int64, br.Title.String, br.Content.String, br.Amount.Int64, br.CreatedAt.Time)
	res, err := db.Exec(sqlstr, br.UserID.Int64, br.Title.String, br.Content.String, br.Amount.Int64, br.CreatedAt.Time)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	br.ID = int(id)
	br._exists = true

	return nil
}

// Update updates the BuyRequest in the database.
func (br *BuyRequest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !br._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if br._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.buy_request SET ` +
		`user_id = ?, title = ?, content = ?, amount = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, br.UserID, br.Title, br.Content, br.Amount, br.CreatedAt, br.ID)
	_, err = db.Exec(sqlstr, br.UserID, br.Title, br.Content, br.Amount, br.CreatedAt, br.ID)
	return err
}

// Save saves the BuyRequest to the database.
func (br *BuyRequest) Save(db XODB) error {
	if br.Exists() {
		return br.Update(db)
	}

	return br.Insert(db)
}

// Delete deletes the BuyRequest from the database.
func (br *BuyRequest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !br._exists {
		return nil
	}

	// if deleted, bail
	if br._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.buy_request WHERE id = ?`

	// run query
	XOLog(sqlstr, br.ID)
	_, err = db.Exec(sqlstr, br.ID)
	if err != nil {
		return err
	}

	// set deleted
	br._deleted = true

	return nil
}

// BuyRequestByID retrieves a row from 'news.buy_request' as a BuyRequest.
//
// Generated from index 'buy_request_id_pkey'.
func BuyRequestByID(db XODB, id int) (*BuyRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, title, content, amount, created_at ` +
		`FROM news.buy_request ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	br := BuyRequest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&br.ID, &br.UserID, &br.Title, &br.Content, &br.Amount, &br.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &br, nil
}
