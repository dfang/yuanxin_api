// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	null "gopkg.in/guregu/null.v3"
)

// HelpRequest represents a row from 'news.help_request'.
type HelpRequest struct {
	ID        int         `json:"id"`                       // id
	UserID    null.Int    `json:"user_id" schema:"user_id"` // user_id
	Title     null.String `json:"title"`                    // title
	Content   null.String `json:"content"`                  // content
	Amount    null.Int    `json:"amount"`                   // amount
	CreatedAt null.Time   `json:"created_at"`               // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HelpRequest exists in the database.
func (hr *HelpRequest) Exists() bool {
	return hr._exists
}

// Deleted provides information if the HelpRequest has been deleted from the database.
func (hr *HelpRequest) Deleted() bool {
	return hr._deleted
}

// Insert inserts the HelpRequest to the database.
func (hr *HelpRequest) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.help_request (` +
		`user_id, title, content, amount, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, hr.UserID, hr.Title, hr.Content, hr.Amount, hr.CreatedAt)
	res, err := db.Exec(sqlstr, hr.UserID, hr.Title, hr.Content, hr.Amount, hr.CreatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	hr.ID = int(id)
	hr._exists = true

	return nil
}

// Update updates the HelpRequest in the database.
func (hr *HelpRequest) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.help_request SET ` +
		`user_id = ?, title = ?, content = ?, amount = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, hr.UserID, hr.Title, hr.Content, hr.Amount, hr.CreatedAt, hr.ID)
	_, err = db.Exec(sqlstr, hr.UserID, hr.Title, hr.Content, hr.Amount, hr.CreatedAt, hr.ID)
	return err
}

// Save saves the HelpRequest to the database.
func (hr *HelpRequest) Save(db XODB) error {
	if hr.Exists() {
		return hr.Update(db)
	}

	return hr.Insert(db)
}

// Delete deletes the HelpRequest from the database.
func (hr *HelpRequest) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hr._exists {
		return nil
	}

	// if deleted, bail
	if hr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.help_request WHERE id = ?`

	// run query
	XOLog(sqlstr, hr.ID)
	_, err = db.Exec(sqlstr, hr.ID)
	if err != nil {
		return err
	}

	// set deleted
	hr._deleted = true

	return nil
}

// HelpRequestByID retrieves a row from 'news.help_request' as a HelpRequest.
//
// Generated from index 'help_request_id_pkey'.
func HelpRequestByID(db XODB, id int) (*HelpRequest, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, title, content, amount, created_at ` +
		`FROM news.help_request ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	hr := HelpRequest{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&hr.ID, &hr.UserID, &hr.Title, &hr.Content, &hr.Amount, &hr.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &hr, nil
}
