// Package model contains the types for schema 'news'.
package model

import (
	"database/sql"
	"fmt"
)

// Code generated by xo. DO NOT EDIT.

// InvitationByID retrieves a row from 'news.invitation' as a Invitation.
//
// Generated from index 'invitation_id_pkey'.
func InvitationByCode(db XODB, code string) (*Invitation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, invitation_code, has_activated ` +
		`FROM news.invitations ` +
		`WHERE invitation_code = ?`

	// run query
	XOLog(sqlstr, code)
	i := Invitation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, code).Scan(&i.ID, &i.InvitationCode, &i.HasActivated)
	if err != nil {
		return nil, err
	}

	return &i, nil
}

// 所有邀请码
func GetAllInvitations(db *sql.DB, start, count int) ([]Invitation, error) {
	sqlstr := fmt.Sprintf("SELECT id, invitation_code, has_activated FROM news.invitations LIMIT %d, %d", start, count)
	rows, err := db.Query(sqlstr)

	if err != nil {
		return nil, err
	}

	defer rows.Close()

	invitations := []Invitation{}

	for rows.Next() {
		var invitation Invitation
		if err := rows.Scan(&invitation.ID, &invitation.InvitationCode, &invitation.HasActivated); err != nil {
			return nil, err
		}
		invitations = append(invitations, invitation)
	}

	return invitations, nil
}
