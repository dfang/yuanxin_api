// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	null "gopkg.in/guregu/null.v3"
)

// Favorite represents a row from 'news.favorites'.
type Favorite struct {
	ID            int         `json:"id"`                                     // id
	UserID        null.Int    `json:"user_id" schema:"user_id"`               // user_id
	FavorableType null.String `json:"favorable_type" schema:"favorable_type"` // favorable_type
	FavorableID   null.Int    `json:"favorable_id" schema:"favorable_id"`     // favorable_id
	CreatedAt     null.Time   `json:"created_at" schema:"created_at"`         // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Favorite exists in the database.
func (f *Favorite) Exists() bool {
	return f._exists
}

// Deleted provides information if the Favorite has been deleted from the database.
func (f *Favorite) Deleted() bool {
	return f._deleted
}

// Insert inserts the Favorite to the database.
func (f *Favorite) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.favorites (` +
		`user_id, favorable_type, favorable_id, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, f.UserID, f.FavorableType, f.FavorableID, f.CreatedAt)
	res, err := db.Exec(sqlstr, f.UserID, f.FavorableType, f.FavorableID, f.CreatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	f.ID = int(id)
	f._exists = true

	return nil
}

// Update updates the Favorite in the database.
func (f *Favorite) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.favorites SET ` +
		`user_id = ?, favorable_type = ?, favorable_id = ?, created_at = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, f.UserID, f.FavorableType, f.FavorableID, f.CreatedAt, f.ID)
	_, err = db.Exec(sqlstr, f.UserID, f.FavorableType, f.FavorableID, f.CreatedAt, f.ID)
	return err
}

// Save saves the Favorite to the database.
func (f *Favorite) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Delete deletes the Favorite from the database.
func (f *Favorite) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.favorites WHERE id = ?`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FavoriteByID retrieves a row from 'news.favorites' as a Favorite.
//
// Generated from index 'favorites_id_pkey'.
func FavoriteByID(db XODB, id int) (*Favorite, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, favorable_type, favorable_id, created_at ` +
		`FROM news.favorites ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	f := Favorite{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.UserID, &f.FavorableType, &f.FavorableID, &f.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &f, nil
}
