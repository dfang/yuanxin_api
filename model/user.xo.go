// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"crypto/sha1"
	"encoding/hex"
	"errors"
	"strconv"
	"time"

	null "gopkg.in/guregu/null.v3"
)

// User represents a row from 'news.users'.
type User struct {
	ID                int         `json:"id"`                                               // id
	Nickname          null.String `json:"nickname"`                                         // nickname
	Pwd               string      `json:"-" schema:"password"`                              // pwd
	Phone             null.String `json:"phone"`                                            // phone
	Email             null.String `json:"email"`                                            // email
	Avatar            null.String `json:"avatar"`                                           // avatar
	Gender            null.Int    `json:"gender"`                                           // gender
	Biography         null.String `json:"biography"`                                        // biography
	CreatedAt         null.Time   `json:"created_at"`                                       // created_at
	LoginDate         null.Time   `json:"login_date"`                                       // login_date
	RealName          null.String `json:"real_name" schema:"real_name"`                     // real_name
	IdentityCardNum   null.String `json:"identity_card_num" schema:"identity_card_num"`     // identity_card_num
	IdentityCardFront null.String `json:"identity_card_front" schema:"identity_card_front"` // identity_card_front
	IdentityCardBack  null.String `json:"identity_card_back" schema:"identity_card_back"`   // identity_card_back
	FromCode          null.String `json:"from_code" schema:"from_code"`                     // from_code
	License           null.String `json:"license"`                                          // license
	Expertise         null.String `json:"expertise"`                                        // expertise
	Resume            null.String `json:"resume"`                                           // resume
	Role              null.Int    `json:"role"`                                             // role
	IsVerified        null.Bool   `json:"is_verified" schema:"is_verified"`                 // is_verified
	AccID             null.String `json:"acc_id" schema:"acc_id"`                           // Acc_ID
	AccToken          null.String `json:"acc_token" schema:"acc_token"`                     //Acc_Token
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.users (` +
		`nickname, pwd, phone, email, avatar, gender, biography, created_at, login_date, real_name, identity_card_num, identity_card_front, identity_card_back, from_code, license, expertise, resume, role, is_verified` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.Nickname, u.Pwd, u.Phone, u.Email, u.Avatar, u.Gender, u.Biography, u.CreatedAt, u.LoginDate, u.RealName, u.IdentityCardNum, u.IdentityCardFront, u.IdentityCardBack, u.FromCode, u.License, u.Expertise, u.Resume, u.Role, u.IsVerified)
	res, err := db.Exec(sqlstr, u.Nickname, u.Pwd, u.Phone, u.Email, u.Avatar, u.Gender, u.Biography, u.CreatedAt, u.LoginDate, u.RealName, u.IdentityCardNum, u.IdentityCardFront, u.IdentityCardBack, u.FromCode, u.License, u.Expertise, u.Resume, u.Role, u.IsVerified)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = int(id)
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.users SET ` +
		`nickname = ?, pwd = ?, phone = ?, email = ?, avatar = ?, gender = ?, biography = ?, created_at = ?, login_date = ?, real_name = ?, identity_card_num = ?, identity_card_front = ?, identity_card_back = ?, from_code = ?, license = ?, expertise = ?, resume = ?, role = ?, is_verified = ?, acc_id = ?, acc_token = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, u.Nickname, u.Pwd, u.Phone, u.Email, u.Avatar, u.Gender, u.Biography, u.CreatedAt, u.LoginDate, u.RealName, u.IdentityCardNum, u.IdentityCardFront, u.IdentityCardBack, u.FromCode, u.License, u.Expertise, u.Resume, u.Role, u.IsVerified, u.AccID, u.AccToken, u.ID)
	_, err = db.Exec(sqlstr, u.Nickname, u.Pwd, u.Phone, u.Email, u.Avatar, u.Gender, u.Biography, u.CreatedAt, u.LoginDate, u.RealName, u.IdentityCardNum, u.IdentityCardFront, u.IdentityCardBack, u.FromCode, u.License, u.Expertise, u.Resume, u.Role, u.IsVerified, u.AccID, u.AccToken, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.users WHERE id = ?`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// UserByID retrieves a row from 'news.users' as a User.
//
// Generated from index 'user_id_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, nickname, pwd, phone, email, avatar, gender, biography, created_at, login_date, real_name, identity_card_num, identity_card_front, identity_card_back, from_code, license, expertise, resume, role, is_verified ` +
		`FROM news.users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Nickname, &u.Pwd, &u.Phone, &u.Email, &u.Avatar, &u.Gender, &u.Biography, &u.CreatedAt, &u.LoginDate, &u.RealName, &u.IdentityCardNum, &u.IdentityCardFront, &u.IdentityCardBack, &u.FromCode, &u.License, &u.Expertise, &u.Resume, &u.Role, &u.IsVerified)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// 生成网易云信acc_id
func GenAccID(email, phone string) string {
	s := email + phone
	h := sha1.New()
	h.Write([]byte(s))
	sum := h.Sum(nil)
	// hash := fmt.Sprintf("%x", sum)
	hash := hex.EncodeToString(sum)
	return hash
}

// 生成网易云信acc_token
func GenAccToken(email, phone string) string {
	curTime := strconv.FormatInt(time.Now().Unix(), 10)
	s := email + phone + curTime
	h := sha1.New()
	h.Write([]byte(s))
	sum := h.Sum(nil)
	// hash := fmt.Sprintf("%x", sum)
	hash := hex.EncodeToString(sum)
	return hash
}
