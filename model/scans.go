// DON'T EDIT *** generated by scaneo *** DON'T EDIT //

package model

import "database/sql"

func ScanUser(r *sql.Row) (User, error) {
	var s User
	if err := r.Scan(
		&s.ID,
		&s.Nickname,
		&s.Pwd,
		&s.Phone,
		&s.Email,
		&s.Avatar,
		&s.Gender,
		&s.CreatedAt,
		&s.LoginDate,
		&s._exists,
		&s._deleted,
	); err != nil {
		return User{}, err
	}
	return s, nil
}

func ScanUsers(rs *sql.Rows) ([]User, error) {
	structs := make([]User, 0, 16)
	var err error
	for rs.Next() {
		var s User
		if err = rs.Scan(
			&s.ID,
			&s.Nickname,
			&s.Pwd,
			&s.Phone,
			&s.Email,
			&s.Avatar,
			&s.Gender,
			&s.CreatedAt,
			&s.LoginDate,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanUserRole(r *sql.Row) (UserRole, error) {
	var s UserRole
	if err := r.Scan(
		&s.ID,
		&s.RoleID,
		&s.UserID,
		&s._exists,
		&s._deleted,
	); err != nil {
		return UserRole{}, err
	}
	return s, nil
}

func ScanUserRoles(rs *sql.Rows) ([]UserRole, error) {
	structs := make([]UserRole, 0, 16)
	var err error
	for rs.Next() {
		var s UserRole
		if err = rs.Scan(
			&s.ID,
			&s.RoleID,
			&s.UserID,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanAuthentication(r *sql.Row) (Authentication, error) {
	var s Authentication
	if err := r.Scan(
		&s.ID,
		&s.UserID,
		&s.UUID,
		&s.Token,
		&s._exists,
		&s._deleted,
	); err != nil {
		return Authentication{}, err
	}
	return s, nil
}

func ScanAuthentications(rs *sql.Rows) ([]Authentication, error) {
	structs := make([]Authentication, 0, 16)
	var err error
	for rs.Next() {
		var s Authentication
		if err = rs.Scan(
			&s.ID,
			&s.UserID,
			&s.UUID,
			&s.Token,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanCaptcha(r *sql.Row) (Captcha, error) {
	var s Captcha
	if err := r.Scan(
		&s.ID,
		&s.Phone,
		&s.Code,
		&s._exists,
		&s._deleted,
	); err != nil {
		return Captcha{}, err
	}
	return s, nil
}

func ScanCaptchas(rs *sql.Rows) ([]Captcha, error) {
	structs := make([]Captcha, 0, 16)
	var err error
	for rs.Next() {
		var s Captcha
		if err = rs.Scan(
			&s.ID,
			&s.Phone,
			&s.Code,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanInvitation(r *sql.Row) (Invitation, error) {
	var s Invitation
	if err := r.Scan(
		&s.ID,
		&s.InvitationCode,
		&s.HasActivated,
		&s._exists,
		&s._deleted,
	); err != nil {
		return Invitation{}, err
	}
	return s, nil
}

func ScanInvitations(rs *sql.Rows) ([]Invitation, error) {
	structs := make([]Invitation, 0, 16)
	var err error
	for rs.Next() {
		var s Invitation
		if err = rs.Scan(
			&s.ID,
			&s.InvitationCode,
			&s.HasActivated,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanNewsItem(r *sql.Row) (NewsItem, error) {
	var s NewsItem
	if err := r.Scan(
		&s.ID,
		&s.Title,
		&s.Description,
		&s.Body,
		&s.Type,
		&s.Link,
		&s.Image,
		&s.Source,
		&s.UpdatedAt,
		&s._exists,
		&s._deleted,
	); err != nil {
		return NewsItem{}, err
	}
	return s, nil
}

func ScanNewsItems(rs *sql.Rows) ([]NewsItem, error) {
	structs := make([]NewsItem, 0, 16)
	var err error
	for rs.Next() {
		var s NewsItem
		if err = rs.Scan(
			&s.ID,
			&s.Title,
			&s.Description,
			&s.Body,
			&s.Type,
			&s.Link,
			&s.Image,
			&s.Source,
			&s.UpdatedAt,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanRole(r *sql.Row) (Role, error) {
	var s Role
	if err := r.Scan(
		&s.ID,
		&s.RealName,
		&s.IdentityCardNum,
		&s.IdentityCardFront,
		&s.IdentityCardEnd,
		&s.License,
		&s.Expertise,
		&s._exists,
		&s._deleted,
	); err != nil {
		return Role{}, err
	}
	return s, nil
}

func ScanRoles(rs *sql.Rows) ([]Role, error) {
	structs := make([]Role, 0, 16)
	var err error
	for rs.Next() {
		var s Role
		if err = rs.Scan(
			&s.ID,
			&s.RealName,
			&s.IdentityCardNum,
			&s.IdentityCardFront,
			&s.IdentityCardEnd,
			&s.License,
			&s.Expertise,
			&s._exists,
			&s._deleted,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}
