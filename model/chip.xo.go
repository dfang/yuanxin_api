// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	null "gopkg.in/guregu/null.v3"
)

// Chip represents a row from 'news.chip'.
type Chip struct {
	ID              int         `json:"id"`                                         // id
	UserID          null.Int    `json:"user_id" schema:"user_id"`                   // user_id
	SerialNumber    null.String `json:"serial_number" schema:"serial_number"`       // serial_number
	Vendor          null.String `json:"vendor"`                                     // vendor
	Amount          null.Int    `json:"amount"`                                     // amount
	ManufactureDate null.Time   `json:"manufacture_date" schema:"manufacture_date"` // manufacture_date
	UnitPrice       null.Float  `json:"unit_price" schema:"unit_price"`             // unit_price
	IsVerified      null.Bool   `json:"is_verified" schema:"unit_price"`            // is_verified
	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Chip exists in the database.
func (c *Chip) Exists() bool {
	return c._exists
}

// Deleted provides information if the Chip has been deleted from the database.
func (c *Chip) Deleted() bool {
	return c._deleted
}

// Insert inserts the Chip to the database.
func (c *Chip) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.chips (` +
		`user_id, serial_number, vendor, amount, manufacture_date, unit_price, is_verified` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.UserID, c.SerialNumber, c.Vendor, c.Amount, c.ManufactureDate, c.UnitPrice, c.IsVerified)
	res, err := db.Exec(sqlstr, c.UserID, c.SerialNumber, c.Vendor, c.Amount, c.ManufactureDate, c.UnitPrice, c.IsVerified)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	c.ID = int(id)
	c._exists = true

	return nil
}

// Update updates the Chip in the database.
func (c *Chip) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.chips SET ` +
		`user_id = ?, serial_number = ?, vendor = ?, amount = ?, manufacture_date = ?, unit_price = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, c.UserID, c.SerialNumber, c.Vendor, c.Amount, c.ManufactureDate, c.UnitPrice, c.ID)
	_, err = db.Exec(sqlstr, c.UserID, c.SerialNumber, c.Vendor, c.Amount, c.ManufactureDate, c.UnitPrice, c.ID)
	return err
}

// Save saves the Chip to the database.
func (c *Chip) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Chip from the database.
func (c *Chip) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.chips WHERE id = ?`

	// run query
	XOLog(sqlstr, c.ID)
	_, err = db.Exec(sqlstr, c.ID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// ChipByID retrieves a row from 'news.chip' as a Chip.
//
// Generated from index 'chip_id_pkey'.
func ChipByID(db XODB, id int) (*Chip, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, serial_number, vendor, amount, manufacture_date, unit_price ` +
		`FROM news.chips ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	c := Chip{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&c.ID, &c.UserID, &c.SerialNumber, &c.Vendor, &c.Amount, &c.ManufactureDate, &c.UnitPrice, &c.IsVerified)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
