// Package model contains the types for schema 'news'.
package model

// Code generated by xo. DO NOT EDIT.

import (
	"errors"

	null "gopkg.in/guregu/null.v3"
)

// Suggestion represents a row from 'news.suggestions'.
type Suggestion struct {
	ID      int         `json:"id"`      // id
	UserID  null.Int    `json:"user_id"` // user_id
	Content null.String `json:"content"` // content

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Suggestion exists in the database.
func (s *Suggestion) Exists() bool {
	return s._exists
}

// Deleted provides information if the Suggestion has been deleted from the database.
func (s *Suggestion) Deleted() bool {
	return s._deleted
}

// Insert inserts the Suggestion to the database.
func (s *Suggestion) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO news.suggestions (` +
		`user_id, content` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.UserID, s.Content)
	res, err := db.Exec(sqlstr, s.UserID, s.Content)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	s.ID = int(id)
	s._exists = true

	return nil
}

// Update updates the Suggestion in the database.
func (s *Suggestion) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE news.suggestions SET ` +
		`user_id = ?, content = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, s.UserID, s.Content, s.ID)
	_, err = db.Exec(sqlstr, s.UserID, s.Content, s.ID)
	return err
}

// Save saves the Suggestion to the database.
func (s *Suggestion) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Suggestion from the database.
func (s *Suggestion) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM news.suggestions WHERE id = ?`

	// run query
	XOLog(sqlstr, s.ID)
	_, err = db.Exec(sqlstr, s.ID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// SuggestionByID retrieves a row from 'news.suggestions' as a Suggestion.
//
// Generated from index 'suggestion_id_pkey'.
func SuggestionByID(db XODB, id int) (*Suggestion, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, user_id, content ` +
		`FROM news.suggestions ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	s := Suggestion{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&s.ID, &s.UserID, &s.Content)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
